# Copyright 2008, Google Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice, 
#     this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#  3. Neither the name of Google Inc. nor the names of its contributors may be
#     used to endorse or promote products derived from this software without
#     specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os

Import('env')
env = env.Clone()

# This SConscript creates the environment for all subdirectories. All
# cross-platform configuration work is done here and replicated out to
# the subdirectories by exporting the env.

print 'SCons OS is %s' % env['PLATFORM']

# Linux and Mac setup
if env['PLATFORM'] in ['posix', 'darwin']:
  # Flag most compiler warnings and treat as errors.
  env.Append(CXXFLAGS=['-ansi', '-pedantic', '-Wall', '-Werror', '-fno-rtti'])
  if env['DEBUG']:
    print 'Compiling with debug symbols'
    env.Append(CXXFLAGS=['-g'])

# Mac setup
if env['PLATFORM'] == 'darwin':
  sdks = os.listdir('/Developer/SDKs')
  if len(sdks) == 0:
    print 'No OS X SDKs found. Exiting.'
    Exit(-1)
  sdk = sdks[-1]
  print 'Using %s' % sdk
  env.Append(LINKFLAGS=['-isysroot',
                        '/Developer/SDKs/%s' % sdk])

# Windows setup
if env['PLATFORM'] == 'win32':
  # Flags for windows MSVC toolchain.
  # See http://msdn2.microsoft.com/en-us/library/abx4dbyh(VS.80).aspx
  #     http://msdn2.microsoft.com/en-us/library/1deeycx5(VS.80).aspx
  #     http://msdn2.microsoft.com/en-us/library/we6hfdy0(VS.80).aspx
  env.Append(CXXFLAGS=['/EHsc', '/GR-'])
  if env['DEBUG']:
    env.Append(CXXFLAGS=['/MDd'])
    env.Append(LINKFLAGS=['/PDB:${TARGET}.pdb', '/DEBUG'])
    env.Append(CCPDBFLAGS=['/Z7'])
  else:
    env.Append(CXXFLAGS=['/MD'])
  # Need winsocket for static linking
  env.Append(LIBS=['ws2_32'])

# Subscripts
SConscript("kml/SConscript", exports='env', duplicate=0)
SConscript("kml/util/SConscript", exports='env', duplicate=0)
SConscript("kml/dom/SConscript", exports='env', duplicate=0)
