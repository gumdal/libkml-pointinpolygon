// Copyright 2009, Google Inc. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//  1. Redistributions of source code must retain the above copyright notice,
//     this list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//  3. Neither the name of Google Inc. nor the names of its contributors may be
//     used to endorse or promote products derived from this software without
//     specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
// EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef KML_DOM_VISITOR_H__
#define KML_DOM_VISITOR_H__

#include <vector>
#include "kml/dom/kml_ptr.h"

namespace kmldom {

class Visitor {
 public:
  virtual ~Visitor() { }

  // Status values returned by VisitXxx() methods
  enum Status {
    // Continue visitation and process child nodes
    CONTINUE,
    // Stop visitation at this point, do not descend to child nodes
    STOP,
    // Stop visitation at this point and remove this node from its parent
    REMOVE
  };

  virtual Status VisitElement(const ElementPtr& node);
  virtual void VisitElementEnd(const ElementPtr& node);

  // >> Visitor API Start >>
  // Autogenerated API to implement the visitor pattern.

  virtual Status VisitContainer(
      const ContainerPtr& element);
  virtual void VisitContainerEnd(
      const ContainerPtr& element);

  virtual Status VisitDocument(
      const DocumentPtr& element);
  virtual void VisitDocumentEnd(
      const DocumentPtr& element);

  virtual Status VisitFeature(
      const FeaturePtr& element);
  virtual void VisitFeatureEnd(
      const FeaturePtr& element);

  virtual Status VisitFolder(
      const FolderPtr& element);
  virtual void VisitFolderEnd(
      const FolderPtr& element);

  virtual Status VisitGroundOverlay(
      const GroundOverlayPtr& element);
  virtual void VisitGroundOverlayEnd(
      const GroundOverlayPtr& element);

  virtual Status VisitKml(
      const KmlPtr& element);
  virtual void VisitKmlEnd(
      const KmlPtr& element);

  virtual Status VisitObject(
      const ObjectPtr& element);
  virtual void VisitObjectEnd(
      const ObjectPtr& element);

  virtual Status VisitOverlay(
      const OverlayPtr& element);
  virtual void VisitOverlayEnd(
      const OverlayPtr& element);

  virtual Status VisitPhotoOverlay(
      const PhotoOverlayPtr& element);
  virtual void VisitPhotoOverlayEnd(
      const PhotoOverlayPtr& element);

  virtual Status VisitPlacemark(
      const PlacemarkPtr& element);
  virtual void VisitPlacemarkEnd(
      const PlacemarkPtr& element);

  virtual Status VisitScreenOverlay(
      const ScreenOverlayPtr& element);
  virtual void VisitScreenOverlayEnd(
      const ScreenOverlayPtr& element);

  // << Visitor API End <<
};

}  // end namespace kmldom

#endif  // KML_DOM_VISITOR_H__
