# Copyright 2008, Google Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice, 
#     this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#  3. Neither the name of Google Inc. nor the names of its contributors may be
#     used to endorse or promote products derived from this software without
#     specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os.path

Import('env')
env = env.Clone()

kmldom_header_files = [
  'abstractlatlonbox.h',
  'abstractview.h',
  'balloonstyle.h',
  'colorstyle.h',
  'container.h',
  'document.h',
  'element.h',
  'extendeddata.h',
  'feature.h',
  'folder.h',
  'geometry.h',
  'hotspot.h',
  'iconstyle.h',
  'kml.h',
  'kml22.h',
  'kml_cast.h',
  'kml_factory.h',
  'kml_funcs.h',
  'kmldom.h',
  'labelstyle.h',
  'linestyle.h',
  'link.h',
  'liststyle.h',
  'model.h',
  'networklink.h',
  'networklinkcontrol.h',
  'object.h',
  'overlay.h',
  'placemark.h',
  'polystyle.h',
  'region.h',
  'schema.h',
  'snippet.h',
  'style.h',
  'stylemap.h',
  'styleselector.h',
  'substyle.h',
  'timeprimitive.h',
  'vec2.h',
]

kmldom_cc_files = [
  'abstractlatlonbox.cc',
  'abstractview.cc',
  'balloonstyle.cc',
  'colorstyle.cc',
  'container.cc',
  'document.cc',
  'element.cc',
  'extendeddata.cc',
  'feature.cc',
  'folder.cc',
  'geometry.cc',
  'hotspot.cc',
  'iconstyle.cc',
  'kml_cast.cc',
  'kml_factory.cc',
  'kml.cc',
  'link.cc',
  'labelstyle.cc',
  'linestyle.cc',
  'liststyle.cc',
  'model.cc',
  'networklink.cc',
  'networklinkcontrol.cc',
  'object.cc',
  'overlay.cc',
  'placemark.cc',
  'polystyle.cc',
  'region.cc',
  'schema.cc',
  'snippet.cc',
  'style.cc',
  'stylemap.cc',
  'styleselector.cc',
  'substyle.cc',
  'timeprimitive.cc',
  'vec2.cc',

  'xsd.cc',
  'kml_handler.cc',
  'parser.cc',
  'serializer.cc',
]

# Library is static.
kmldom = env.Library(target='kmldom', source=kmldom_cc_files)

# Installation
env.Install(env['LIBDIR'], kmldom)
env.Install(os.path.join(env['INCDIR'], 'kml', 'dom'), kmldom_header_files)

# Unit Tests for public classes and methods.
env.UnitTest('abstractlatlonbox_test', 'abstractlatlonbox_test.cc')
env.UnitTest('abstractview_test', 'abstractview_test.cc')
env.UnitTest('balloonstyle_test', 'balloonstyle_test.cc')
env.UnitTest('colorstyle_test', 'colorstyle_test.cc')
env.UnitTest('container_test', 'container_test.cc')
env.UnitTest('document_test', 'document_test.cc')
env.UnitTest('element_test', 'element_test.cc')
env.UnitTest('extendeddata_test', 'extendeddata_test.cc')
env.UnitTest('feature_test', 'feature_test.cc')
env.UnitTest('folder_test', 'folder_test.cc')
env.UnitTest('geometry_test', 'geometry_test.cc')
env.UnitTest('hotspot_test', 'hotspot_test.cc')
env.UnitTest('iconstyle_test', 'iconstyle_test.cc')
env.UnitTest('kml_cast_test', 'kml_cast_test.cc')
env.UnitTest('kml_test', 'kml_test.cc')
env.UnitTest('kml_factory_test', 'kml_factory_test.cc')
env.UnitTest('labelstyle_test', 'labelstyle_test.cc')
env.UnitTest('linestyle_test', 'linestyle_test.cc')
env.UnitTest('link_test', 'link_test.cc')
env.UnitTest('liststyle_test', 'liststyle_test.cc')
env.UnitTest('model_test', 'model_test.cc')
env.UnitTest('networklink_test', 'networklink_test.cc')
env.UnitTest('networklinkcontrol_test', 'networklinkcontrol_test.cc')
env.UnitTest('object_test', 'object_test.cc')
env.UnitTest('overlay_test', 'overlay_test.cc')
env.UnitTest('placemark_test', 'placemark_test.cc')
env.UnitTest('polystyle_test', 'polystyle_test.cc')
env.UnitTest('region_test', 'region_test.cc')
env.UnitTest('schema_test', 'schema_test.cc')
env.UnitTest('snippet_test', 'snippet_test.cc')
env.UnitTest('style_test', 'style_test.cc')
env.UnitTest('stylemap_test', 'stylemap_test.cc')
env.UnitTest('styleselector_test', 'styleselector_test.cc')
env.UnitTest('substyle_test', 'substyle_test.cc')
env.UnitTest('timeprimitive_test', 'timeprimitive_test.cc')
env.UnitTest('vec2_test', 'vec2_test.cc')
env.UnitTest('unknown_test', 'unknown_test.cc')

# Unit tests for internal classes.
env.UnitTest('attributes_test', 'attributes_test.cc')
env.UnitTest('parser_test', 'parser_test.cc')
env.UnitTest('serializer_test', 'serializer_test.cc')
env.UnitTest('xsd_test', 'xsd_test.cc')
