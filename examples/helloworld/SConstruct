# Copyright 2008, Google Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice, 
#     this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#  3. Neither the name of Google Inc. nor the names of its contributors may be
#     used to endorse or promote products derived from this software without
#     specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR 
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import os
from SCons.Script.SConscript import SConsEnvironment

# -------------------------------------
# SCons version checking
# -------------------------------------
EnsureSConsVersion(0,97) # v0.97 or greater.

# -------------------------------------
# Enviroment initialization and command line parsing
# -------------------------------------
env = Environment()
option_filename = 'examples.conf'
opts = Options(option_filename)

if env['PLATFORM'] in ['posix', 'darwin']:
  default_incdir = '/usr/local/include'
  default_libdir = '/usr/local/lib'
else:
  default_incdir = ''
  default_libdir = ''

opts.AddOptions(
  BoolOption('DEBUG', 'Build with debug symbols', False),
  PathOption('LIBKML_LIBDIR', 'Were do we find the libkml libraries?',
             default_incdir,
             PathOption.PathAccept),
  PathOption('LIBKML_INCDIR', 'Were do we find the libkml headers?',
             default_libdir,
             PathOption.PathAccept),
)

opts.Update(env)
opts.Save(option_filename, env)  # We remember previous user-set options.

# Print help text for options with 'scons -h'
Help(opts.GenerateHelpText(env))

# -------------------------------------
# Cross-platform build setup.
# TODO: unifiy cross-platform munging w/ main codebase.
# -------------------------------------
if env['PLATFORM'] in ['darwin', 'posix']:
  env.Append(CXXFLAGS=['-fno-rtti'])
  if env['DEBUG']:
   print 'Compiling with debug symbols'
   env.Append(CXXFLAGS=['-g'])

# Mac setup
if env['PLATFORM'] == 'darwin':
  sdks = os.listdir('/Developer/SDKs')
  if len(sdks) == 0:
    print 'No OS X SDKs found. Exiting.'
    Exit(-1)
  sdk = sdks[-1]
  print 'Using %s' % sdk
  env.Append(LINKFLAGS=['-isysroot', '/Developer/SDKs/%s' % sdk])

# Windows setup
if env['PLATFORM'] == 'win32':
  # Flags for windows MSVC toolchain.
  # See http://msdn2.microsoft.com/en-us/library/abx4dbyh(VS.80).aspx
  #     http://msdn2.microsoft.com/en-us/library/1deeycx5(VS.80).aspx
  # TODO: more of this for debug libs.
  # /GR- disables RTTI (enabled by default)
  env.Append(CXXFLAGS=['/EHsc', '/MD', '/GR-'])
  # Need winsocket for static linking
  env.Append(LIBS=['ws2_32'])
  env.Append(LIBPATH=['../../third_party/zlib-1.2.3.win32/lib'])
  env.Append(LIBZ='zlib')
else:
  env.Append(LIBZ='z')

env.Append(CPPPATH=[env['LIBKML_INCDIR'], '../../src',])
env.Append(LIBPATH=['.', env['LIBKML_LIBDIR'], '../../build',
                    '../../build/kml/dom', '../../build/kml/util'])

# -------------------------------------
# Configure contexts
# -------------------------------------
if not env.GetOption('clean'):
  conf = Configure(env)
  if not conf.CheckCXXHeader('kml/dom.h') \
      or not conf.CheckLib('kmldom') \
      or not conf.CheckLib('minizip'):
    print 'Error: no installation of kmldom found. Before building these'
    print 'examples, you have to install the main kmldom library. If you have'
    print 'installed the headers and libraries in non-default locations, run'
    print 'scons -h for instructions on building against those directories.'
    Exit(1)
  conf.Finish()

# -------------------------------------
# Libraries and programs
# -------------------------------------
env.Library('helloutil', ['print.cc'])

env.Program('createkml', 'createkml.cc',
        LIBS=['kmldom'])

env.Program('helloattrs', 'helloattrs.cc',
        LIBS=['kmldom', 'expat'])

env.Program('helloenum', 'helloenum.cc',
        LIBS=['kmldom', 'expat'])

env.Program('hellofeatures', 'hellofeatures.cc',
        LIBS=['helloutil', 'kmldom', 'kmlutil', 'expat'])

env.Program('hellofolder', 'hellofolder.cc',
        LIBS=['kmldom'])

env.Program('hellogeometry', 'hellogeometry.cc',
        LIBS=['kmldom', 'expat'])

env.Program('hellohref', 'hellohref.cc',
        LIBS=['kmldom', 'kmlutil', 'expat'])

env.Program('hellokmz', 'hellokmz.cc',
        LIBS=['kmldom', 'kmlutil', 'minizip', 'expat', env['LIBZ']])

env.Program('helloregion', 'helloregion.cc',
        LIBS=['kmldom', 'expat', 'kmlutil'])

env.Program('helloserializer', 'helloserializer.cc',
        LIBS=['kmldom'])

env.Program('helloworld', 'helloworld.cc',
        LIBS=['kmldom'])

env.Program('parsekml', 'parsekml.cc',
        LIBS=['kmldom','expat'])

env.Program('prettykml', 'prettykml.cc',
        LIBS=['kmldom', 'kmlutil', 'expat', 'minizip', env['LIBZ']])

